// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.0
// source: message.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PingServiceClient is the client API for PingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PingServiceClient interface {
	PingFunc(ctx context.Context, in *PingRequestMessage, opts ...grpc.CallOption) (PingService_PingFuncClient, error)
}

type pingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPingServiceClient(cc grpc.ClientConnInterface) PingServiceClient {
	return &pingServiceClient{cc}
}

func (c *pingServiceClient) PingFunc(ctx context.Context, in *PingRequestMessage, opts ...grpc.CallOption) (PingService_PingFuncClient, error) {
	stream, err := c.cc.NewStream(ctx, &PingService_ServiceDesc.Streams[0], "/PingService/PingFunc", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingServicePingFuncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PingService_PingFuncClient interface {
	Recv() (*PongReplyStream, error)
	grpc.ClientStream
}

type pingServicePingFuncClient struct {
	grpc.ClientStream
}

func (x *pingServicePingFuncClient) Recv() (*PongReplyStream, error) {
	m := new(PongReplyStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingServiceServer is the server API for PingService service.
// All implementations must embed UnimplementedPingServiceServer
// for forward compatibility
type PingServiceServer interface {
	PingFunc(*PingRequestMessage, PingService_PingFuncServer) error
	mustEmbedUnimplementedPingServiceServer()
}

// UnimplementedPingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPingServiceServer struct {
}

func (UnimplementedPingServiceServer) PingFunc(*PingRequestMessage, PingService_PingFuncServer) error {
	return status.Errorf(codes.Unimplemented, "method PingFunc not implemented")
}
func (UnimplementedPingServiceServer) mustEmbedUnimplementedPingServiceServer() {}

// UnsafePingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PingServiceServer will
// result in compilation errors.
type UnsafePingServiceServer interface {
	mustEmbedUnimplementedPingServiceServer()
}

func RegisterPingServiceServer(s grpc.ServiceRegistrar, srv PingServiceServer) {
	s.RegisterService(&PingService_ServiceDesc, srv)
}

func _PingService_PingFunc_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingRequestMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingServiceServer).PingFunc(m, &pingServicePingFuncServer{stream})
}

type PingService_PingFuncServer interface {
	Send(*PongReplyStream) error
	grpc.ServerStream
}

type pingServicePingFuncServer struct {
	grpc.ServerStream
}

func (x *pingServicePingFuncServer) Send(m *PongReplyStream) error {
	return x.ServerStream.SendMsg(m)
}

// PingService_ServiceDesc is the grpc.ServiceDesc for PingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PingService",
	HandlerType: (*PingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PingFunc",
			Handler:       _PingService_PingFunc_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "message.proto",
}
